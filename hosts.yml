
---
# @see https://github.com/ansible/ansible/blob/devel/examples/hosts.yaml
# @see https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#splitting-out-host-and-group-specific-data

all:

  # As variaveis aqui são padrão para todos os grupos e hosts. Podem ser
  # sobrescritas individualmente mais tarde
  vars:
    alb_manange_all: yes
    alb_manange_sanitycheck: yes
    alb_manange_common: yes

    alb_manange_haproxy: yes
    alb_manange_openresty: yes
    alb_manange_ufw: yes

    # This will force some extra headers and info. Good to inspect apps
    alb_forcedebug: yes
    alb_hide_alb: no
    alb_expose_version: yes

    alb_use_consul: yes

    # Debug. Usar apenas quando estiver programando em lua!
    alb_openresty_http_lua_code_cache_disabled: false

    alb_auth_users:
      - username: adminuser
        password: "plain-password-for-adminuser"
      - username: "otheradminuser"
        password: "another-password-here"
      - username: "anotheruserthatnowhavetoberemoved"
        password: "anotheranotherpass"
        state: absent

    alb_dmz:
      - ip: 173.249.10.99
        name: aguia-pescadora-delta.etica.ai
      - ip: 167.86.127.220
        name: aguia-pescadora-echo.etica.ai
      - ip: 167.86.127.225
        name: aguia-pescadora-foxtrot.etica.ai
      #- ip: 144.91.108.24
      #  name: aguia-pescadora-golf.etica.ai

    alb_bastion_hosts:
      - ip: 144.91.107.171
        name: "rocha-basalto.vps.fititnt.org"

    #alb_bastion_hosts:
    #  - ip: 192.0.2.255
    #    name: "You Can Put Here Your Own IP"

    #alb_bastion_hosts:
    #  - ip: 192.0.2.255
    #    name: "You Can Put Here Your Own IP"

    alb_ufw_rules_always:
      - rule: limit
        port: 22
        proto: tcp
        comment: "[SSH Port] Allows access from any IP on :22 on this ap-alb-cluster-demo instead of using alb_bastion_hosts"
      - rule: allow
        port: 8404
        proto: tcp
        comment: "[HAProxy Stats] Allows access from any IP on :8404 on this ap-alb-cluster-demo instead of using alb_bastion_hosts"
      - rule: allow
        port: 80
        proto: tcp
        comment: "HTTP"
      - rule: allow
        port: 443
        proto: tcp
        comment: "HTTPS"

    ## @TODO: for this demo, maybe we will implement some private VPS instead
    ##        of binding on all ports (https://github.com/fititnt/ap-application-load-balancer/issues/20)
    ##        (fititnt, 2019-11-26 15:45)
    ## Old text
    # By default, AP-ALB explicity bind OpenResty to localhost. Since we're
    # Load balancing with HAProxy from other hosts (and we do not have private
    # network, we will have to explicitly bind openresty to every IP and
    # handle at firewall who will access).
    alb_openresty_ip: 0.0.0.0

    alb_haproxy_stats_enabled: yes
    alb_haproxy_stats_ip: 0.0.0.0 # 0.0.0.0 means exposed for everyone. Use firewall!
    alb_haproxy_stats_port: 8404
    alb_haproxy_stats_uri: "/haproxy?stats"
    alb_haproxy_stats_realm: "{{ alb_name }}: {{ inventory_hostname }}"

    nlb_defaults_timeout_connect: 15000

    # This will allow haproxy stats ask password without enforcing IP ranges
    alb_haproxy_stats_trusted_hosts_only: false

    # Note, just to avoid reach limits on Let'Encript, we will disable
    # for some time the letsencrypt default clause
    # alb_letsencrypt_default: "return false"
    #alb_letsencrypt_default: "return true"
    #alb_letsencrypt_acmeurl_custom: "https://acme-staging-v02.api.letsencrypt.org/directory"
    alb_acme_production: true
    alb_acme_rule_last: false

    alb_acme_rule_whitelist:
      - aguia-pescadora-delta.etica.ai
      - aguia-pescadora-echo.etica.ai
      - aguia-pescadora-foxtrot.etica.ai
      - aguia-pescadora-golf.etica.ai
      - apd.etica.ai
      - ape.etica.ai
      - apf.etica.ai
      - apg.etica.ai
      - d-e-f.lb-ap.etica.ai
      - www.d-e-f.lb-ap.etica.ai
      - test1.d-e-f.lb-ap.etica.ai
      - test2.d-e-f.lb-ap.etica.ai
      - test3.d-e-f.lb-ap.etica.ai

    alb_ufw_autoapply_dmz: yes           # no: ALB/UFW ignore alb_dmz: []
    alb_ufw_autoapply_bastion_hosts: no # no: ALB/UFW ignore alb_bastion_hosts: []
    alb_ufw_autoapply_jump_boxes: no    # no: ALB/UFW ignore alb_jump_boxes: []

    nlb_raw_bottom: |
        frontend ft_redis
             bind *:6380 name redis
             default_backend bk_redis
        backend bk_redis
             option tcp-check
             timeout server 120s
             timeout client 120s
             tcp-check send AUTH\ hi1Zba2dmDor1xiPrgLrk4DYuB8i7evgGDNsPHj3NXE45ux1yCfOmsIOpaCC9I1Sm1qz4ABlqW5lhF4G\r\n
             tcp-check expect string +OK
             tcp-check send PING\r\n
             tcp-check expect string +PONG
             tcp-check send info\ replication\r\n
             tcp-check expect string role:master
             tcp-check send QUIT\r\n
             tcp-check expect string +OK
             server R1 173.249.10.99:6379 check inter 5s
             server R2 167.86.127.220:6379 check inter 5s
             server R3 167.86.127.225:6379 check inter 5s

    alb_apps:
      - app_uid: "hello-world"
        app_domain: "hello-world.{{ ansible_default_ipv4.address }}.nip.io"
        app_domain_extras:
          - hello-world.*
        app_debug: true
        app_alb_strategy: "hello-world"

    # If defined, will create /opt/alb/sysapps/.htaccess just once
    alb_sysapps_htpassword : "{{ alb_auth_users }}"

    # If an alb_sysapps does not have some property defined, it will assume this default
    alb_sysapps__app_auth_basic: "Internal Access Area"
    alb_sysapps__app_auth_basic_user_file: "/opt/alb/sysapps/.htaccess"
    alb_sysapps__app_auth_basic_enabled: true

    #alb_sysapps_default_app:
    #  app_auth_basic: "Internal Access Area"
    #  app_auth_basic_user_file: "/opt/alb/sysapps/.htaccess"
    #  app_auth_basic_enabled: true

    alb_sysapps:

      - app_uid: "consul"
        app_domain_extras:
          - consul-ui.*
        app_domain: "consul.{{ ansible_default_ipv4.address }}.nip.io"
        app_alb_strategy: "proxy"
        # app_alb_strategy: "hello-world"
        app_forcehttps: no
        app_alb_proxy: "http://127.0.0.1:8500"

      - app_uid: "haproxy"
        app_domain_extras:
          - haproxy.*
        app_domain: "haproxy.{{ ansible_default_ipv4.address }}.nip.io"
        app_alb_strategy: "proxy"
        app_alb_proxy: "http://127.0.0.1:{{ alb_haproxy_stats_port }}"

      # multitail -ci white /var/log/alb/access.log -ci yellow -I /var/log/alb/error.log  -ci blue -I /var/log/alb/letsencrypt.log -ci green /var/log/app/APPNAMEHERE/access.log -ci red -I /var/log/app/APPNAMEHERE/error.log
      # multitail -ci white /var/log/alb/access.log -ci yellow -I /var/log/alb/error.log  -ci blue -I /var/log/alb/letsencrypt.log -ci green /var/log/app/hello-world/access.log -ci red -I /var/log/app/hello-world/error.log

    ## Ansible Role davidwittman.redis ---------------------------------------##
    # Common to all nodes
    redis_version: 5.0.5
    redis_password: "hi1Zba2dmDor1xiPrgLrk4DYuB8i7evgGDNsPHj3NXE45ux1yCfOmsIOpaCC9I1Sm1qz4ABlqW5lhF4G" # openssl rand 60 | openssl base64 -A
    redis_tcp_keepalive: 10
    redis_timeout: 10
    # This means on redis-cli, will need to use
    # redis-cli -a 'hi1Zba2dmDor1xiPrgLrk4DYuB8i7evgGDNsPHj3NXE45ux1yCfOmsIOpaCC9I1Sm1qz4ABlqW5lhF4G'
    # echo -e  "*2\r\n\$4\r\nAUTH\r\n\$16\r\nhi1Zba2dmDor1xiPrgLrk4DYuB8i7evgGDNsPHj3NXE45ux1yCfOmsIOpaCC9I1Sm1qz4ABlqW5lhF4G\r\n*1\r\n\$4\r\nINFO\r\n" | nc aguia-pescadora-delta.etica.ai 6379

    ## Ansible Role brianshumate.consul ------------------------------------- ##
    ## https://github.com/brianshumate/ansible-consul
    consul_datacenter: 'DC-Germany'

    # Use less system resources
    # See https://www.consul.io/docs/install/performance.html#minimum-server-requirements
    raft_multiplier: 5

    # Note: we're leaving to all nodes be servers and their decide alone by
    #       election who will bootstrap
    consul_node_role: server
    consul_bootstrap_expect: true

    consul_node_meta:
      node_type: "my-custom-type"
      node_meta1: "metadata1"
      node_meta2: "metadata2"

    # https://learn.hashicorp.com/consul/security-networking/forwarding
    # consul_dnsmasq_enable: true

    ## Other variables ------------------------------------------------------- ##
    ansible_python_interpreter: /usr/bin/python3

  children:
    cluster_all_nodes:
      children:
        delta:
        echo:
        foxtrot:
    cluster_leader:
      children:
        delta:
    redis_leader:
      children:
        delta:
    redis_follower:
      children:
        echo:
      vars:
        redis_slaveof: aguia-pescadora-delta.etica.ai 6379
    redis_sentinel:
      children:
        foxtrot:
      vars:
        redis_sentinel_monitors:
          - name: master01
            host: aguia-pescadora-delta.etica.ai
            port: 6379
    # Role brianshumate.consul requires this specific group naming
    consul_instances:
      children:
        delta:
        echo:
        foxtrot:
    delta:
      hosts:
        aguia-pescadora-delta.etica.ai

    echo:
      hosts:
        aguia-pescadora-echo.etica.ai

    foxtrot:
      hosts:
        aguia-pescadora-foxtrot.etica.ai

