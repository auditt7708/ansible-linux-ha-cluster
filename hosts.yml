---
# @see https://github.com/ansible/ansible/blob/devel/examples/hosts.yaml
# @see https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#splitting-out-host-and-group-specific-data

### Tests for AP-ALB v0.8.x adaptations to support RHEL/CentOS 8 family and design changes to allow flexibility even for non-tested OSs #34

# Echo: Ubuntu 18.04
# ssh root@aguia-pescadora-echo.etica.ai

# Foxtrot: Debian 10
# ssh root@aguia-pescadora-foxtrot.etica.ai

# Golf: Centos 7
# ssh root@aguia-pescadora-golf.etica.ai

# Anortosito: Centos 8
# ssh root@rocha-anortosito.vps.fititnt.org
#    ansible_python_interpreter: /usr/local/bin/python3

# Basalto: FreeBSD 12
# ssh root@rocha-basalto.vps.fititnt.org
###

all:

  # all.hosts: this is one YAML alternative to separate files on
  #            host_vars/host_name. It's the place where we put variables very
  #            specific to a host that are not common to all (See: all.vars) or
  #            related to group (See; all.children).
  hosts:
    ap_echo_ubuntu18:
      ansible_host: aguia-pescadora-echo.etica.ai

      # alb_haproxy_ip: "*" (bind all ports) and 80->8080 443->4443 already are AP-ALB
      # defaults. Since all servers are frontend servers, we will not change it

      # alb_openresty_ip by default bind to 127.0.0.1 (:8080, :4443)
      # If using only firewall and still want load balance, you could use 0.0.0.0
      # If you can have private networking (our case) set to the private IP.
      # alb_openresty_ip: 10.8.0.101
      alb_openresty_ip: 0.0.0.0 # Quick Testing for RHEL/CentOS without external roles

      # wireguard_endpoint: must be one way, without Wireguard, to this host be reached by others
      wireguard_endpoint: aguia-pescadora-echo.etica.ai

      # wireguard_address: must be specific to each host.
      wireguard_address: "10.8.0.101/24"

    # Both ap_echo and ap_golf follow the same logic as ap_echo.
    ap_foxtrot_debian10:
      ansible_host: aguia-pescadora-foxtrot.etica.ai
      #alb_openresty_ip: 10.8.0.102
      alb_openresty_ip: 0.0.0.0 # Quick Testing for RHEL/CentOS without external roles
      wireguard_endpoint: aguia-pescadora-foxtrot.etica.ai
      wireguard_address: "10.8.0.102/24"

    ap_golf_centos7:
      ansible_host: aguia-pescadora-golf.etica.ai
      #alb_openresty_ip: 10.8.0.103
      alb_openresty_ip: 0.0.0.0 # Quick Testing for RHEL/CentOS without external roles
      wireguard_endpoint: aguia-pescadora-golf.etica.ai
      wireguard_address: "10.8.0.103/24"

    rocha_anortosito_centos8:
      ansible_host: rocha-anortosito.vps.fititnt.org
      # ansible_python_interpreter: /usr/local/bin/python3

    rocha_basalto_freebsd12:
      ansible_host: rocha-basalto.vps.fititnt.org

  # all.vars: This is where we specify variable common to all hosts and groups.
  #           Sometimes is possible to use variables, like
  #           app_domain: "hello-world.{{ ansible_default_ipv4.address }}.nip.io"
  vars:
    alb_boostrap_ignore_very_early_abort_checks: yes
    ## AP-ALB Role, Start ___________________________________________________ ##
    # @see https://github.com/fititnt/ap-application-load-balancer
    # All variables are prefixed with alb_ and nlb_
    alb_manange_all: yes
    alb_manange_sanitycheck: yes
    alb_manange_common: yes

    alb_manange_haproxy: yes
    alb_manange_openresty: yes
    alb_manange_ufw: yes

    # This will force some extra headers and info. Good to inspect apps
    alb_forcedebug: yes
    alb_hide_alb: no
    alb_expose_version: yes

    alb_use_consul: no

    # just testing
    alb_bootstrap_ansible_control_node: yes

    # Debug. Usar apenas quando estiver programando em lua!
    alb_openresty_http_lua_code_cache_disabled: false

    alb_auth_users:
      - username: adminuser
        password: "plain-password-for-adminuser"
      - username: "otheradminuser"
        password: "another-password-here"
      - username: "anotheruserthatnowhavetoberemoved"
        password: "anotheranotherpass"
        state: absent

    alb_healthcheck_token: "hippocrates"

    alb_dmz:
      - ip: 173.249.10.99
        name: aguia-pescadora-echo.etica.ai
      - ip: 167.86.127.220
        name: aguia-pescadora-echo.etica.ai
      - ip: 167.86.127.225
        name: aguia-pescadora-foxtrot.etica.ai
      - ip: 144.91.108.24
        name: aguia-pescadora-golf.etica.ai
      - ip: "10.8.0.101/24"
        name: private_network
      #- ip: 144.91.108.24
      #  name: aguia-pescadora-golf.etica.ai

    alb_bastion_hosts:
      - ip: 144.91.107.171
        name: "rocha-basalto.vps.fititnt.org"

    alb_ufw_rules_always:
      - rule: limit
        port: 22
        proto: tcp
        comment: "[SSH Port] Allows access from any IP on :22 on this ap-alb-cluster-demo instead of using alb_bastion_hosts"
      - rule: allow
        port: 8404
        proto: tcp
        comment: "[HAProxy Stats] Allows access from any IP on :8404 on this ap-alb-cluster-demo instead of using alb_bastion_hosts"
      - rule: allow
        port: 80
        proto: tcp
        comment: "HTTP"
      - rule: allow
        port: 443
        proto: tcp
        comment: "HTTPS"

    ## TODO: I should implement squid-proxy or put my local workstation on the
    #        private network of this cluster, so even the alb_haproxy_stats_ip
    #        coult be a private IP (fititnt, 2019-12-03 22:41 BRT)
    alb_haproxy_stats_enabled: yes
    alb_haproxy_stats_ip: 0.0.0.0 # 0.0.0.0 means exposed for everyone. Use firewall!
    alb_haproxy_stats_port: 8404
    alb_haproxy_stats_uri: "/haproxy?stats"
    alb_haproxy_stats_realm: "{{ alb_name }}: {{ inventory_hostname }}"

    nlb_defaults_timeout_connect: 15000

    # This will allow haproxy stats ask password without enforcing IP ranges
    alb_haproxy_stats_trusted_hosts_only: false

    alb_acme_production: true # When testing set this to false. In special if not storing real keys
    alb_acme_rule_last: false

    alb_acme_rule_whitelist:
      - aguia-pescadora-echo.etica.ai
      - aguia-pescadora-echo.etica.ai
      - aguia-pescadora-foxtrot.etica.ai
      - aguia-pescadora-golf.etica.ai
      - apd.etica.ai
      - ape.etica.ai
      - apf.etica.ai
      - apg.etica.ai
      - d-e-f.lb-ap.etica.ai
      - www.d-e-f.lb-ap.etica.ai
      - test1.d-e-f.lb-ap.etica.ai
      - test2.d-e-f.lb-ap.etica.ai
      - test3.d-e-f.lb-ap.etica.ai

    alb_ufw_autoapply_dmz: yes           # no: ALB/UFW ignore alb_dmz: []
    alb_ufw_autoapply_bastion_hosts: no # no: ALB/UFW ignore alb_bastion_hosts: []
    alb_ufw_autoapply_jump_boxes: no    # no: ALB/UFW ignore alb_jump_boxes: []

    alb_apps:
      - app_uid: "hello-world-minimal"
        app_domain: "hello-world-minimal.{{ ansible_default_ipv4.address }}.nip.io"
        app_alb_strategy: "minimal"
        # app_hook_after: "{{ role_path }}/ad-hoc-alb/hooks/hello.yml"
        app_hook_after: "{{ role_path }}/ad-hoc-alb/hooks/example/example_app_hook_after.yml"
        app_hook_before: "{{ role_path }}/ad-hoc-alb/hooks/example/example_app_hook_before.yml"
        app_alb_raw_file: "templates/example_app_alb_raw_file.conf.j2"
        app_alb_raw: >
          charset_types application/json;
          default_type application/json;

          location = /status {
              stub_status;
              allow all;
          }

          location = / {
              content_by_lua_block {
                 local cjson = require "cjson"
                 ngx.status = ngx.HTTP_OK
                 ngx.say(cjson.encode({
                     msg = "Hello, hello-world-minimal! (from app_alb_raw)",
                     status = 200
                 }))
              }
          }

      - app_uid: "hello-world"
        app_domain: "hello-world.{{ ansible_default_ipv4.address }}.nip.io"
        app_domain_extras:
          - "hello-world.*"
          #- 'www.d-e-f.lb-ap.etica.ai'
          #- '"~^hello\-world\.d{1,3}+\.d{1,3}+\.d{1,3}+.d{1,3}+\.nip\.io$"'
        app_debug: true
        app_alb_strategy: "hello-world"
      # multitail -ci white /var/log/alb/access.log -ci yellow -I /var/log/alb/error.log  -ci blue -I /var/log/alb/letsencrypt.log -ci green /var/log/app/hello-world/access.log -ci red -I /var/log/app/hello-world/error.log

    # If defined, will create /opt/alb/sysapps/.htaccess just once
    alb_sysapps_htpassword : "{{ alb_auth_users }}"

    # If an alb_sysapps does not have some property defined, it will assume this default
    alb_sysapps__app_auth_basic: "Internal Access Area"
    alb_sysapps__app_auth_basic_user_file: "/opt/alb/sysapps/.htaccess"
    alb_sysapps__app_auth_basic_enabled: true

    #alb_sysapps_default_app:
    #  app_auth_basic: "Internal Access Area"
    #  app_auth_basic_user_file: "/opt/alb/sysapps/.htaccess"
    #  app_auth_basic_enabled: true

    alb_sysapps:

      - app_uid: "consul"
        app_domain: "consul.{{ ansible_default_ipv4.address }}.nip.io"
        app_domain_extras:
          - "consul.*"
          #- '"~^consul\.d{1,3}+\.d{1,3}+\.d{1,3}+.d{1,3}+\.nip\.io$"'
        app_alb_strategy: "proxy"
        app_alb_proxy: "http://127.0.0.1:8500"

      - app_uid: "haproxy"
        app_domain: "haproxy.{{ ansible_default_ipv4.address }}.nip.io"
        app_domain_extras:
          - "haproxy.*"
          #- '"~^haproxy\.d{1,3}+\.d{1,3}+\.d{1,3}+.d{1,3}+\.nip\.io$"'
        app_alb_strategy: "proxy"
        app_alb_proxy: "http://127.0.0.1:{{ alb_haproxy_stats_port }}"

      # multitail -ci white /var/log/alb/access.log -ci yellow -I /var/log/alb/error.log  -ci blue -I /var/log/alb/letsencrypt.log -ci green /var/log/app/APPNAMEHERE/access.log -ci red -I /var/log/app/APPNAMEHERE/error.log
      # multitail -ci white /var/log/alb/access.log -ci yellow -I /var/log/alb/error.log  -ci blue -I /var/log/alb/letsencrypt.log -ci green /var/log/app/hello-world/access.log -ci red -I /var/log/app/hello-world/error.log

    ## AP-ALB Role, End ----------------------------------------------------- ##

    ## Ansible Role brianshumate.consul, Start ______________________________ ##
    ## https://github.com/brianshumate/ansible-consul
    consul_datacenter: 'DC-Germany'

    # Use less system resources
    # See https://www.consul.io/docs/install/performance.html#minimum-server-requirements
    raft_multiplier: 5

    # Note: we're leaving to all nodes be servers and their decide alone by
    #       election who will bootstrap
    consul_node_role: server
    consul_bootstrap_expect: true

    consul_node_meta:
      node_type: "my-custom-type"
      node_meta1: "metadata1"
      node_meta2: "metadata2"

    # https://learn.hashicorp.com/consul/security-networking/forwarding
    # consul_dnsmasq_enable: true

    ## Ansible Role brianshumate.consul, end -------------------------------- ##

    ## Ansible Role githubixx.ansible_role_wireguard ________________________ ##
    # @see https://github.com/githubixx/ansible-role-wireguard
    # Note: githubixx.ansible_role_wireguard v4.4.1

    # Directory to store WireGuard configuration on the remote hosts
    wireguard_remote_directory: "/etc/wireguard"

    # The default port WireGuard will listen if not specified otherwise.
    wireguard_port: "51820"

    # The default interface name that wireguard should use if not specified otherwise.
    wireguard_interface: "wg0"

    ## Other variables ------------------------------------------------------- ##
    # ansible_python_interpreter: /usr/bin/python3

  # all.children: this is one ansible way to create groups of hosts with YAML
  #               format, and one alternative to separate files on
  #               group_vars/groupname
  children:
    cluster_all_nodes:
      hosts:
        ap_delta:
        ap_echo:
        ap_foxtrot:
    vpn_nodes:
      hosts:
        ap_delta:
        ap_echo:
        ap_foxtrot:

    # Role brianshumate.consul requires this very specific, consul_instances, group naming
    consul_instances:
      hosts:
        ap_delta:
        ap_echo:
        ap_foxtrot:

    cross_platform_test_2:
      hosts:
        ap_echo_ubuntu18:
        ap_foxtrot_debian10:
        ap_golf_centos7:
        rocha_anortosito_centos8:
        rocha_basalto_freebsd12:

    # cross_platform_test:
    #   hosts:
    #     ap_delta_ubuntu18:
    #     ap_echo_debian10:
    #     ap_foxtrot_centos8:
    #     ap_golf_archilinux:
    #     rocha_anortosito_freebsd12:
    #     rocha_basalto_opensuse15: